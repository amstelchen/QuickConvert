#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0pre on Wed May  4 12:33:22 2022
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
import webbrowser, os, sys, string
#from xdg.BaseDirectory import xdg_config_home

Categories = [
    "Area",
    "Data Transfer Rate",
    "Digital Storage",
    "Energy",
    "Frequency",
    "Fuel Economy",
    "Length",
    "Mass",
    "Plane Angle",
    "Pressure",
    "Speed",
    "Temperature",
    "Time",
    "Volume"
]

def config_load():
    global Category
    global WinPos
    WinPos = wx.Point(-1, -1)

    config_path = os.path.expanduser("~/.config/quickconvert")
    config_file = os.path.join(config_path,"quickconvert.conf")

    if not os.path.exists(config_path):
        os.mkdir(os.path.join(os.path.expanduser("~/.config"),"quickconvert"))

    if os.path.exists(config_file):
        #print(config_file)
        config_desc = open(os.path.join(config_path, "quickconvert.conf"), 'r', newline="\n")
        lines = config_desc.readlines()
        #print("Category:" + lines[0].split('=')[1].rstrip())
        #print("WinPosY:" + lines[1].split('=')[1].rstrip())
        #print("WinPosY:" + lines[2].split('=')[1].rstrip())
        Category = lines[0].split('=')[1].rstrip()
        WinPos = wx.Point(int(lines[1].split('=')[1].rstrip()), int(lines[2].split('=')[1].rstrip()))
    else:
        config_desc = open(config_file, 'w', newline="\n")
        lines = ["Category=Length\n", "WinPosX=200\n", "WinPosY=200\n"]
        config_desc.writelines(lines)

def config_save(WinPos):
    global Category
    #global WinPos
    #WinPos = wx.Point(600, 600)
    
    config_path = os.path.expanduser("~/.config/quickconvert/quickconvert.conf")
    if not os.path.exists(config_path):
        os.mkdir(os.path.join(os.path.expanduser("~/.config"),"quickconvert"))
    config_file = open(config_path, 'w', newline="\n")
    lines = ["Category=Length\n", "WinPosX=" + str(WinPos.x) + "\n", "WinPosY=" + str(WinPos.y) + "\n"]
    config_file.writelines(lines)

# end wxGlade


class MainDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainDialog.__init__
        config_load()
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize(wx.DLG_UNIT(self, wx.Size(250, 100)))
        self.SetPosition(WinPos)
        self.SetTitle(_("QuickConvert"))
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), "images/transfer-128x128.png"), wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.FlexGridSizer(3, 2, 10, 30)
        sizer_1.Add(grid_sizer_1, 1, wx.ALL | wx.EXPAND, 5)

        label_1 = wx.StaticText(self, wx.ID_ANY, _("Category:"))
        label_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
        grid_sizer_1.Add(label_1, 0, 0, 0)

        self.cmbCategory = wx.ComboBox(self, wx.ID_ANY, choices=Categories, style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.cmbCategory.SetMinSize(wx.DLG_UNIT(self.cmbCategory, wx.Size(150, 14)))
        self.cmbCategory.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
        grid_sizer_1.Add(self.cmbCategory, 0, wx.ALL, 0)
        #index = 0
        #for iCategory in Categories:
        #    index = self.cmbCategory.Insert(iCategory, index)
        #    index += 1
        self.cmbCategory.SetValue(Category)

        label_2 = wx.StaticText(self, wx.ID_ANY, _("Source unit:"))
        label_2.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
        grid_sizer_1.Add(label_2, 0, 0, 0)

        self.textSource = wx.TextCtrl(self, wx.ID_ANY, "")
        self.textSource.SetMinSize(wx.DLG_UNIT(self.textSource, wx.Size(100, 14)))
        self.textSource.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
        grid_sizer_1.Add(self.textSource, 0, 0, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, _("Target unit:"))
        label_3.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
        grid_sizer_1.Add(label_3, 0, 0, 0)

        self.textTarget = wx.TextCtrl(self, wx.ID_ANY, "")
        self.textTarget.SetMinSize(wx.DLG_UNIT(self.textTarget, wx.Size(100, 14)))
        self.textTarget.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
        grid_sizer_1.Add(self.textTarget, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        self.button_HELP = wx.Button(self, wx.ID_HELP, "")
        sizer_2.AddButton(self.button_HELP)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.button_OK.Bind(wx.EVT_BUTTON, self.event_Convert)
        self.button_CANCEL.Bind(wx.EVT_BUTTON, self.event_Close)
        self.button_HELP.Bind(wx.EVT_BUTTON, self.event_Help)
        self.cmbCategory.Bind(wx.EVT_COMBOBOX, self.event_Combo)
        # end wxGlade

    def event_Help(self, event):  # wxGlade: MainDialog.<event_handler>
        url = 'https://github.com/amstelchen/quickconvert'
        webbrowser.open(url)
        event.Skip()
    def event_Convert(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'event_Convert' not implemented!")
        event.Skip()
    def event_Combo(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'event_Combo' not implemented!")
        event.Skip()
    def event_Close(self, event):  # wxGlade: MainDialog.<event_handler>
        config_save(self.GetPosition())
        quit()
        event.Skip()
# end of class MainDialog

class QCApp(wx.App):
    def OnInit(self):
        self.dialogMain = MainDialog(None, wx.ID_ANY, "")
        self.SetTopWindow(self.dialogMain)
        self.dialogMain.ShowModal()
        self.dialogMain.Destroy()
        return True

# end of class QCApp

def main():
    gettext.install("app") # replace with the appropriate catalog name

    app = QCApp(0)
    app.MainLoop()

if __name__ == "__main__":
    main()
